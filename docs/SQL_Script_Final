CREATE TABLE hotel
    (nombre VARCHAR2(20) NOT NULL,
    calificacion NUMBER(2,1) NOT NULL,
    direccion VARCHAR2(40) NOT NULL);

ALTER TABLE hotel
ADD CONSTRAINT PK_hotel
PRIMARY KEY (nombre);  

ALTER TABLE hotel
ADD CONSTRAINT CK_hotel_calificacion
CHECK (calificacion BETWEEN 0.0 AND 5.0);

CREATE TABLE cliente
    (id VARCHAR2(20) NOT NULL,
    tipo_id VARCHAR2(4) NOT NULL,
    nombre VARCHAR2(20) NOT NULL,
    tipo VARCHAR2(20) NOT NULL);
    
ALTER TABLE cliente
ADD CONSTRAINT PK_cliente
PRIMARY KEY (id, tipo_id); 

CREATE TABLE operador
    (id VARCHAR2(20) NOT NULL,
    nombre VARCHAR2(20) NOT NULL,
    tipo VARCHAR2(20) NOT NULL,
    validacion_camara_de_comercio_empresa NUMBER(1,0),
    validacion_super_turismo_empresa NUMBER(1,0),
    miembro_comunidad_universitaria_persona NUMBER(1,0));
    
ALTER TABLE operador
ADD CONSTRAINT CK_empresa_o_persona
CHECK( ((validacion_camara_de_comercio_empresa IS NOT NULL) AND (validacion_super_turismo_empresa IS NOT NULL) AND (miembro_comunidad_universitaria_persona IS NULL)) 
        OR ((validacion_camara_de_comercio_empresa IS NULL) AND (validacion_super_turismo_empresa IS NULL) AND (miembro_comunidad_universitaria_persona IS NOT NULL)));


ALTER TABLE operador
ADD CONSTRAINT PK_operador
PRIMARY KEY (id);

ALTER TABLE operador
ADD CONSTRAINT CK_bool_validacion_camara_de_comercio_empresa
CHECK (validacion_camara_de_comercio_empresa in (1,0));

ALTER TABLE operador
ADD CONSTRAINT CK_bool_validacion_super_turismo_empresa
CHECK (validacion_super_turismo_empresa in (1,0));

ALTER TABLE operador
ADD CONSTRAINT CK_bool_miembro_comunidad_universitaria_persona
CHECK (miembro_comunidad_universitaria_persona in (1,0));


CREATE TABLE apartamento
    (nombre VARCHAR2(40) NOT NULL,
    numero VARCHAR2(10) NOT NULL,
    amoblado NUMBER(1,0) NOT NULL,
    numero_habitaciones NUMBER(3,0) NOT NULL,
    direccion VARCHAR2(40) NOT NULL,
    incluye_servicios NUMBER(1,0) NOT NULL,
    calificacion NUMBER(2,1) NOT NULL);
    
ALTER TABLE apartamento
ADD CONSTRAINT CK_apartamento_calificacion
CHECK (calificacion BETWEEN 0.0 AND 5.0);

ALTER TABLE apartamento
ADD CONSTRAINT PK_apartamento
PRIMARY KEY (numero, direccion);

ALTER TABLE apartamento
ADD CONSTRAINT CK_bool_amoblado
CHECK (amoblado in (1,0));

ALTER TABLE apartamento
ADD CONSTRAINT CK_bool_incluye_servicios
CHECK (incluye_servicios in (1,0));

CREATE TABLE vivienda_express
    (nombre VARCHAR2(20) NOT NULL,
    direccion VARCHAR2(40) NOT NULL,
    numero_habitaciones NUMBER(3,0) NOT NULL,
    menaje VARCHAR2(100) NOT NULL,
    calificacion NUMBER(2,1) NOT NULL);
    
ALTER TABLE vivienda_express
ADD CONSTRAINT PK_viviendaExpress
PRIMARY KEY (direccion);

ALTER TABLE vivienda_express
ADD CONSTRAINT CK_vivienda_express_calificacion
CHECK (calificacion BETWEEN 0.0 AND 5.0);

CREATE TABLE habitacion_hotel
    (tipo VARCHAR2(20) NOT NULL,
    numero_habitacion VARCHAR2(20) NOT NULL,
    tamano NUMBER(20,2) NOT NULL,
    direccion_hotel VARCHAR2(40) NOT NULL);

ALTER TABLE habitacion_hotel
ADD CONSTRAINT FK_direccion_hotel
FOREIGN KEY (direccion_hotel)
REFERENCES hotel(direccion);

ALTER TABLE habitacion_hotel
ADD CONSTRAINT PK_habitacion_hotel
PRIMARY KEY (numero_habitacion, direccion_hotel);

CREATE TABLE instalacion_habitacion_hotel
    (tipo_instalacion VARCHAR2(20) NOT NULL,
    numero_habitacion_hotel_habitacion VARCHAR2(20) NOT NULL,
    direccion_hotel_habitacion_hotel VARCHAR2(40) NOT NULL);

ALTER TABLE instalacion_habitacion_hotel
ADD CONSTRAINT FK_numero_habitacion_y_direccion_habitacion_hotel
FOREIGN KEY (numero_habitacion_hotel_habitacion, direccion_hotel_habitacion_hotel)
REFERENCES habitacion_hotel(numero_habitacion, direccion_hotel);

ALTER TABLE instalacion_habitacion_hotel
ADD CONSTRAINT PK_instalacion_habitacion_hotel
PRIMARY KEY (tipo_instalacion, numero_habitacion_hotel_habitacion, direccion_hotel_habitacion_hotel);

CREATE TABLE servicio_habitacion_hotel
    (tipo_servicio VARCHAR2(20) NOT NULL,
    numero_habitacion_habitacion_hotel VARCHAR2(20) NOT NULL,
    direccion_hotel_habitacion_hotel VARCHAR2(40) NOT NULL);

ALTER TABLE servicio_habitacion_hotel
ADD CONSTRAINT FK_numero_habitacion_y_direccion_habitacion_hotel
FOREIGN KEY (numero_habitacion_habitacion_hotel, direccion_hotel_habitacion_hotel)
REFERENCES habitacion_hotel(numero_habitacion, direccion_hotel);

ALTER TABLE servicio_habitacion_hotel
ADD CONSTRAINT PK_servicio_habitacion_hotel
PRIMARY KEY (tipo_servicio, numero_habitacion_habitacion_hotel, direccion_hotel_habitacion_hotel);

CREATE TABLE hostal
    (nombre VARCHAR2(40) NOT NULL,
    direccion VARCHAR2(40) NOT NULL,
    horario_apertura TIMESTAMP NOT NULL,
    horario_cierre TIMESTAMP NOT NULL,
    calificacion NUMBER(2,1) NOT NULL);

ALTER TABLE hostal
ADD CONSTRAINT PK_hostal
PRIMARY KEY (direccion);

ALTER TABLE hostal
ADD CONSTRAINT CK_hostal_calificacion
CHECK (calificacion BETWEEN 0.0 AND 5.0);

CREATE TABLE habitacion_hostal
    (direccion_hostal VARCHAR2(40) NOT NULL,
    numero_habitacion VARCHAR2(20) NOT NULL,
    tamano NUMBER(20,2) NOT NULL);

ALTER TABLE habitacion_hostal
ADD CONSTRAINT FK_direccion_hostal
FOREIGN KEY (direccion_hostal)
REFERENCES hostal(direccion);

ALTER TABLE habitacion_hostal
ADD CONSTRAINT PK_habitacion_hostal
PRIMARY KEY (direccion_hostal, numero_habitacion);

CREATE TABLE vivienda_universitaria
    (nombre VARCHAR2(40) NOT NULL,
    direccion VARCHAR2(40) NOT NULL,
    numero_apartamento VARCHAR2(20) NOT NULL,
    vivienda_compartida NUMBER(1,0) NOT NULL,
    menaje VARCHAR2(100) NOT NULL,
    capacidad NUMBER(3) NOT NULL,
    calificacion NUMBER(2,1) NOT NULL);

ALTER TABLE vivienda_universitaria
ADD CONSTRAINT PK_vivienda_universitaria
PRIMARY KEY (direccion, numero_apartamento);

ALTER TABLE vivienda_universitaria
ADD CONSTRAINT CK_bool_vivienda_compartida
CHECK (vivienda_compartida in (1,0));

ALTER TABLE vivienda_universitaria
ADD CONSTRAINT CK_vivienda_universitaria_calificacion
CHECK (calificacion BETWEEN 0.0 AND 5.0);

CREATE TABLE vivienda_habitacion
    (nombre VARCHAR2(40) NOT NULL,
    direccion VARCHAR2(40) NOT NULL,
    numero_apartamento VARCHAR2(20) NOT NULL,
    calificacion NUMBER(2,1) NOT NULL);

ALTER TABLE vivienda_habitacion
ADD CONSTRAINT PK_vivienda_habitacion
PRIMARY KEY (direccion, numero_apartamento);

ALTER TABLE vivienda_habitacion
ADD CONSTRAINT CK_vivienda_habitacion_calificacion
CHECK (calificacion BETWEEN 0.0 AND 5.0);

CREATE TABLE servicio_habitacion
    (tipo VARCHAR2(20) NOT NULL,
    precio NUMBER(40,0) NOT NULL);

ALTER TABLE servicio_habitacion
ADD CONSTRAINT PK_servicio_habitacion
PRIMARY KEY (tipo);

CREATE TABLE vivienda_habitacion_servicio_habitacion
    (direccion_vivienda_habitacion VARCHAR2(40) NOT NULL,
    numero_vivienda_habitacion VARCHAR2(20) NOT NULL,
    tipo_servicio_habitacion VARCHAR2(20) NOT NULL);

ALTER TABLE vivienda_habitacion_servicio_habitacion
ADD CONSTRAINT FK_numero_habitacion_y_direccion_vivienda_habitacion
FOREIGN KEY (direccion_vivienda_habitacion, numero_vivienda_habitacion)
REFERENCES vivienda_habitacion(direccion, numero_apartamento);

ALTER TABLE vivienda_habitacion_servicio_habitacion
ADD CONSTRAINT FK_tipo_servicio_habitacion
FOREIGN KEY (tipo_servicio_habitacion)
REFERENCES servicio_habitacion(tipo);

ALTER TABLE vivienda_habitacion_servicio_habitacion
ADD CONSTRAINT PK_vivienda_habitacion_servicio_habitacion
PRIMARY KEY (direccion_vivienda_habitacion, numero_vivienda_habitacion, tipo_servicio_habitacion);

CREATE TABLE oferta
    (id VARCHAR2(20) NOT NULL,
    duracion_contrato_dias NUMBER(10,0) NOT NULL,
    costo_contrato NUMBER(20,0) NOT NULL,
    precio_especial NUMBER(20,0) NOT NULL,
    condicion_precio_especial VARCHAR2(200) NOT NULL,
    costo_adicional_servicios NUMBER(20,0) NOT NULL,
    costo_seguro_arrendamiento NUMBER(20,0) NOT NULL,
    id_operador VARCHAR2(20) NOT NULL,
    id_cliente VARCHAR2(20),
    direccion_hostal VARCHAR2(40),
    numero_habitacion_hostal VARCHAR2(20),
    direccion_hotel_habitacion_hotel VARCHAR2(40),
    numero_habitacion_habitacion_hotel VARCHAR2(20),
    direccion_vivienda_universitaria VARCHAR2(40),
    numero_apartamento_vivienda_universitaria VARCHAR2(20),
    direccion_vivienda_habitacion VARCHAR2(40),
    numero_apartamento_vivienda_habitacion VARCHAR2(20),
    direccion_apartamento VARCHAR2(40),
    numero_apartamento VARCHAR2(20),
    direccion_vivienda_express VARCHAR2(40));   
    
ALTER TABLE oferta
ADD CONSTRAINT CK_oferta_solo_un_lugar
CHECK((direccion_hostal IS NOT NULL  AND numero_habitacion_hostal IS NOT NULL) 
OR (direccion_hotel_habitacion_hotel IS NOT NULL AND numero_habitacion_habitacion_hotel IS NOT NULL) 
OR (direccion_vivienda_universitaria IS NOT NULL AND numero_apartamento_vivienda_universitaria IS NOT NULL)
OR (direccion_vivienda_habitacion IS NOT NULL AND numero_apartamento_vivienda_habitacion IS NOT NULL)
OR (direccion_apartamento IS NOT NULL AND numero_apartamento IS NOT NULL)
OR (direccion_vivienda_express IS NOT NULL));
    
ALTER TABLE oferta
ADD CONSTRAINT PK_oferta
PRIMARY KEY (id);

ALTER TABLE oferta
ADD CONSTRAINT FK_id_operador
FOREIGN KEY (id_operador)
REFERENCES operador(id);

ALTER TABLE oferta
ADD CONSTRAINT FK_id_cliente
FOREIGN KEY (id_cliente)
REFERENCES cliente(id);

ALTER TABLE oferta
ADD CONSTRAINT FK_direccion_hostal
FOREIGN KEY (direccion_hostal)
REFERENCES hostal(direccion);

ALTER TABLE oferta
ADD CONSTRAINT FK_numero_habitacion_hostal
FOREIGN KEY (numero_habitacion_hostal)
REFERENCES habitacion_hostal(numero_habitacion);

ALTER TABLE oferta
ADD CONSTRAINT FK_numero_habitacion_y_direccion_habitacion_hotel
FOREIGN KEY (numero_habitacion_habitacion_hotel, direccion_hotel_habitacion_hotel)
REFERENCES habitacion_hotel(numero_habitacion, direccion_hotel);

ALTER TABLE oferta
ADD CONSTRAINT FK_numero_habitacion_y_direccion_vivienda_universitaria
FOREIGN KEY (numero_apartamento_vivienda_universitaria, direccion_vivienda_universitaria)
REFERENCES vivienda_universitaria(numero_apartamento, direccion);

ALTER TABLE oferta
ADD CONSTRAINT FK_numero_apartamento_y_direccion_vivienda_habitacion
FOREIGN KEY (direccion_vivienda_habitacion, numero_apartamento_vivienda_habitacion)
REFERENCES vivienda_habitacion(direccion, numero_apartamento);

ALTER TABLE oferta
ADD CONSTRAINT FK_numero_y_direccion_apartamento
FOREIGN KEY (direccion_apartamento, numero_apartamento)
REFERENCES apartamento(direccion, numero);

ALTER TABLE oferta
ADD CONSTRAINT FK_direccion_vivienda_express
FOREIGN KEY (direccion_vivienda_express)
REFERENCES vivienda_express(direccion);

--RFC1
SELECT DISTINCT dineros.id_operador, nombrardos.nombre,
dineros.dinero_ano_corrido, dineros.dinero_ano_actual
FROM
(SELECT ano_actual.id_operador, NVL(ano_corrido.dinero_ano_corrido,0)
AS dinero_ano_corrido,
NVL(ano_actual.dinero_ano_actual,0) AS dinero_ano_actual
FROM
(SELECT oferta_corta.id_operador,
SUM(ofertas_ano_corrido.duracion_dias*oferta_corta.costo_contrato_dia) AS
dinero_ano_corrido
FROM
((SELECT id_oferta, duracion_dias, fecha_inicial
FROM reserva
WHERE fecha_inicial >= (CURRENT_DATE - NUMTOYMINTERVAL(1,
'year'))) ofertas_ano_corrido
FULL OUTER JOIN
(SELECT id, id_operador, costo_contrato_dia
FROM oferta) oferta_corta
ON ofertas_ano_corrido.id_oferta = oferta_corta.id)
GROUP BY oferta_corta.id_operador) ano_corrido
FULL OUTER JOIN
(SELECT oferta_corta.id_operador,
SUM(ofertas_ano_actual.duracion_dias*oferta_corta.costo_contrato_dia) AS
dinero_ano_actual
FROM
((SELECT id_oferta, duracion_dias, fecha_inicial
FROM reserva
WHERE fecha_inicial >= to_date('01-01-2023','DD-MM-
YYYY')) ofertas_ano_actual
FULL OUTER JOIN
(SELECT id, id_operador, costo_contrato_dia
FROM oferta) oferta_corta
ON ofertas_ano_actual.id_oferta =
oferta_corta.id)
GROUP BY oferta_corta.id_operador) ano_actual
ON ano_actual.id_operador =
ano_corrido.id_operador) dineros
LEFT OUTER JOIN
(SELECT oferta_corta.id,
oferta_corta.id_operador, nombre_operador.nombre,
oferta_corta.costo_contrato_dia
FROM
(SELECT id, id_operador,
costo_contrato_dia
FROM oferta) oferta_corta
LEFT OUTER JOIN
(SELECT id, nombre
FROM operador) nombre_operador
ON nombre_operador.id =
oferta_corta.id_operador) nombrardos
ON dineros.id_operador =
nombrardos.id_operador;

--RFC2
SELECT id, visitas, costo_contrato_dia, fecha_publicacion_reserva
FROM oferta
ORDER BY visitas DESC
FETCH FIRST 20 ROWS ONLY;

--RFC3
SELECT ofertas.id,
       ROUND((NVL(reservas.dias_ocupada,0))/ofertas.date_difference,2) AS indice_ocupacion
FROM
    (SELECT id, ROUND(CURRENT_DATE-fecha_publicacion_reserva,0) AS date_difference
    FROM oferta) ofertas
    LEFT OUTER JOIN
        (SELECT id_oferta, SUM(duracion_dias) AS dias_ocupada
        FROM reserva
        GROUP BY id_oferta) reservas
        ON reservas.id_oferta = ofertas.id
WHERE ofertas.date_difference <> 0;

--RFC4
SELECT ofertas_2.id, ofertas_2.fecha_inicial_reserva, ofertas_2.fecha_finalizacion_reserva
FROM
    (SELECT ofertas.id, ofertas.fecha_publicacion_reserva, 
           NVL(reservas.fecha_inicial,ofertas.fecha_publicacion_reserva) AS fecha_inicial_reserva, 
           NVL(reservas.fecha_inicial,ofertas.fecha_publicacion_reserva)+NVL(reservas.duracion_dias,0) AS fecha_finalizacion_reserva
    FROM
        ((SELECT id_oferta, fecha_inicial, duracion_dias
        FROM reserva) reservas
        FULL OUTER JOIN
            (SELECT id, fecha_publicacion_reserva, costo_contrato_dia, precio_especial_dia
            FROM oferta) ofertas
            ON reservas.id_oferta = ofertas.id)) ofertas_2
WHERE (ofertas_2.fecha_inicial_reserva >= to_date('01-01-2021','DD-MM-YYYY')) 
AND (ofertas_2.fecha_finalizacion_reserva <= to_date('01-01-2022','DD-MM-YYYY'));

--RFC5
-- Tabla clientes
SELECT id, tipo,
    DIRECCION_HOSTAL_HABITACION_HOSTAL, NUMERO_HABITACION_HABITACION_HOSTAL, 
    DIRECCION_HOTEL_HABITACION_HOTEL, NUMERO_HABITACION_HABITACION_HOTEL,
    DIRECCION_VIVIENDA_UNIVERSITARIA, NUMERO_APARTAMENTO_VIVIENDA_UNIVERSITARIA,
    DIRECCION_VIVIENDA_HABITACION, NUMERO_APARTAMENTO_VIVIENDA_HABITACION,
    DIRECCION_APARTAMENTO, NUMERO_APARTAMENTO, DIRECCION_VIVIENDA_EXPRESS
FROM
(SELECT clientes.id, clientes.tipo,
    ofertas.DIRECCION_HOSTAL_HABITACION_HOSTAL, ofertas.NUMERO_HABITACION_HABITACION_HOSTAL, 
    ofertas.DIRECCION_HOTEL_HABITACION_HOTEL, ofertas.NUMERO_HABITACION_HABITACION_HOTEL,
    ofertas.DIRECCION_VIVIENDA_UNIVERSITARIA, ofertas.NUMERO_APARTAMENTO_VIVIENDA_UNIVERSITARIA,
    ofertas.DIRECCION_VIVIENDA_HABITACION, ofertas.NUMERO_APARTAMENTO_VIVIENDA_HABITACION,
    ofertas.DIRECCION_APARTAMENTO, ofertas.NUMERO_APARTAMENTO, ofertas.DIRECCION_VIVIENDA_EXPRESS
FROM
    (SELECT id, 
        NVL(DIRECCION_HOSTAL_HABITACION_HOSTAL,'No Aplica') AS DIRECCION_HOSTAL_HABITACION_HOSTAL, NVL(NUMERO_HABITACION_HABITACION_HOSTAL,'No Aplica') AS NUMERO_HABITACION_HABITACION_HOSTAL, 
        NVL(DIRECCION_HOTEL_HABITACION_HOTEL,'No Aplica') AS DIRECCION_HOTEL_HABITACION_HOTEL, NVL(NUMERO_HABITACION_HABITACION_HOTEL,'No Aplica') AS NUMERO_HABITACION_HABITACION_HOTEL, 
        NVL(DIRECCION_VIVIENDA_UNIVERSITARIA,'No Aplica') AS DIRECCION_VIVIENDA_UNIVERSITARIA, NVL(NUMERO_APARTAMENTO_VIVIENDA_UNIVERSITARIA,'No Aplica') AS NUMERO_APARTAMENTO_VIVIENDA_UNIVERSITARIA, 
        NVL(DIRECCION_VIVIENDA_HABITACION,'No Aplica') AS DIRECCION_VIVIENDA_HABITACION, NVL(NUMERO_APARTAMENTO_VIVIENDA_HABITACION,'No Aplica') AS NUMERO_APARTAMENTO_VIVIENDA_HABITACION, 
        NVL(DIRECCION_APARTAMENTO,'No Aplica') AS DIRECCION_APARTAMENTO, NVL(NUMERO_APARTAMENTO,'No Aplica') AS NUMERO_APARTAMENTO, 
        NVL(DIRECCION_VIVIENDA_EXPRESS,'No Aplica') AS DIRECCION_VIVIENDA_EXPRESS
    FROM oferta) ofertas
    LEFT OUTER JOIN
    (SELECT clientos.id, clientos.nombre, clientos.tipo, reservas.id_oferta
    FROM
        (SELECT id_oferta, id_cliente
        FROM reserva) reservas
        FULL OUTER JOIN
            (SELECT id, nombre, tipo
            FROM cliente) clientos
            ON clientos.id = reservas.id_cliente) clientes
        ON clientes.id_oferta = ofertas.id
        ORDER BY clientes.tipo, clientes.id DESC)
        WHERE id IS NOT NULL;

--Tabla Operadores
SELECT operadores.id, operadores.nombre,
    ofertas.DIRECCION_HOSTAL_HABITACION_HOSTAL, ofertas.NUMERO_HABITACION_HABITACION_HOSTAL, 
    ofertas.DIRECCION_HOTEL_HABITACION_HOTEL, ofertas.NUMERO_HABITACION_HABITACION_HOTEL,
    ofertas.DIRECCION_VIVIENDA_UNIVERSITARIA, ofertas.NUMERO_APARTAMENTO_VIVIENDA_UNIVERSITARIA,
    ofertas.DIRECCION_VIVIENDA_HABITACION, ofertas.NUMERO_APARTAMENTO_VIVIENDA_HABITACION,
    ofertas.DIRECCION_APARTAMENTO, ofertas.NUMERO_APARTAMENTO, ofertas.DIRECCION_VIVIENDA_EXPRESS
FROM
    (SELECT id, id_operador, 
            NVL(DIRECCION_HOSTAL_HABITACION_HOSTAL,'No Aplica') AS DIRECCION_HOSTAL_HABITACION_HOSTAL, NVL(NUMERO_HABITACION_HABITACION_HOSTAL,'No Aplica') AS NUMERO_HABITACION_HABITACION_HOSTAL, 
            NVL(DIRECCION_HOTEL_HABITACION_HOTEL,'No Aplica') AS DIRECCION_HOTEL_HABITACION_HOTEL, NVL(NUMERO_HABITACION_HABITACION_HOTEL,'No Aplica') AS NUMERO_HABITACION_HABITACION_HOTEL, 
            NVL(DIRECCION_VIVIENDA_UNIVERSITARIA,'No Aplica') AS DIRECCION_VIVIENDA_UNIVERSITARIA, NVL(NUMERO_APARTAMENTO_VIVIENDA_UNIVERSITARIA,'No Aplica') AS NUMERO_APARTAMENTO_VIVIENDA_UNIVERSITARIA, 
            NVL(DIRECCION_VIVIENDA_HABITACION,'No Aplica') AS DIRECCION_VIVIENDA_HABITACION, NVL(NUMERO_APARTAMENTO_VIVIENDA_HABITACION,'No Aplica') AS NUMERO_APARTAMENTO_VIVIENDA_HABITACION, 
            NVL(DIRECCION_APARTAMENTO,'No Aplica') AS DIRECCION_APARTAMENTO, NVL(NUMERO_APARTAMENTO,'No Aplica') AS NUMERO_APARTAMENTO, 
            NVL(DIRECCION_VIVIENDA_EXPRESS,'No Aplica') AS DIRECCION_VIVIENDA_EXPRESS
    FROM oferta) ofertas
    RIGHT OUTER JOIN
    (SELECT id, nombre
    FROM operador
    WHERE miembro_comunidad_universitaria_persona = 1) operadores
    ON ofertas.id_operador = operadores.id;

--RFC6
SELECT clientes.id_cliente, precio_especial_tomado,
       (duracion_dias*costo_contrato_dia+costo_adicional_servicios+costo_seguro_arrendamiento) AS precio_total_pagado_normal,
       (duracion_dias*precio_especial_dia+costo_adicional_servicios+costo_seguro_arrendamiento) AS precio_especial_total_pagado_normal,
       duracion_dias AS dias_contratados
FROM
    (SELECT id_cliente, id_oferta, precio_especial_tomado, fecha_realizacion_reserva, fecha_inicial, duracion_dias
    FROM reserva) clientes
    LEFT OUTER JOIN
        (SELECT id, costo_contrato_dia, precio_especial_dia, costo_adicional_servicios, costo_seguro_arrendamiento,
               NVL(DIRECCION_HOSTAL_HABITACION_HOSTAL,'No Aplica') AS DIRECCION_HOSTAL_HABITACION_HOSTAL, NVL(NUMERO_HABITACION_HABITACION_HOSTAL,'No Aplica') AS NUMERO_HABITACION_HABITACION_HOSTAL, 
               NVL(DIRECCION_HOTEL_HABITACION_HOTEL,'No Aplica') AS DIRECCION_HOTEL_HABITACION_HOTEL, NVL(NUMERO_HABITACION_HABITACION_HOTEL,'No Aplica') AS NUMERO_HABITACION_HABITACION_HOTEL, 
               NVL(DIRECCION_VIVIENDA_UNIVERSITARIA,'No Aplica') AS DIRECCION_VIVIENDA_UNIVERSITARIA, NVL(NUMERO_APARTAMENTO_VIVIENDA_UNIVERSITARIA,'No Aplica') AS NUMERO_APARTAMENTO_VIVIENDA_UNIVERSITARIA, 
               NVL(DIRECCION_VIVIENDA_HABITACION,'No Aplica') AS DIRECCION_VIVIENDA_HABITACION, NVL(NUMERO_APARTAMENTO_VIVIENDA_HABITACION,'No Aplica') AS NUMERO_APARTAMENTO_VIVIENDA_HABITACION, 
               NVL(DIRECCION_APARTAMENTO,'No Aplica') AS DIRECCION_APARTAMENTO, NVL(NUMERO_APARTAMENTO,'No Aplica') AS NUMERO_APARTAMENTO, 
               NVL(DIRECCION_VIVIENDA_EXPRESS,'No Aplica') AS DIRECCION_VIVIENDA_EXPRESS
        FROM oferta) reservas
        ON clientes.id_oferta = reservas.id
WHERE clientes.id_cliente = 100000562;

--RFC8
SELECT reservas.id_cliente, veces_reservado, cantidad_dias_reservados
FROM
    (SELECT id,
           DIRECCION_HOSTAL_HABITACION_HOSTAL, NUMERO_HABITACION_HABITACION_HOSTAL, 
           DIRECCION_HOTEL_HABITACION_HOTEL, NUMERO_HABITACION_HABITACION_HOTEL,
           DIRECCION_VIVIENDA_UNIVERSITARIA, NUMERO_APARTAMENTO_VIVIENDA_UNIVERSITARIA,
           DIRECCION_VIVIENDA_HABITACION, NUMERO_APARTAMENTO_VIVIENDA_HABITACION,
           DIRECCION_APARTAMENTO, NUMERO_APARTAMENTO, DIRECCION_VIVIENDA_EXPRESS
    FROM oferta
    WHERE DIRECCION_HOTEL_HABITACION_HOTEL = 'Calle 85 G Numero 03 K 46') ofertas
    RIGHT OUTER JOIN
        (SELECT tabla2.id_cliente, tabla2.id_oferta, veces_reservado, cantidad_dias_reservados
        FROM
            (SELECT id_cliente, id_oferta, COUNT(*) AS veces_reservado
            FROM reserva
            GROUP BY id_cliente, id_oferta) tabla1
                FULL OUTER JOIN
                (SELECT id_cliente, id_oferta, SUM(duracion_dias) AS cantidad_dias_reservados
                FROM reserva
                GROUP BY id_cliente, id_oferta) tabla2
                ON tabla1.id_cliente = tabla2.id_cliente AND tabla1.id_oferta = tabla2.id_oferta
        WHERE veces_reservado >= 3 OR cantidad_dias_reservados >= 15) reservas
        ON ofertas.id = reservas.id_oferta;

--RFC9
SELECT ofertas.id, NVL(cantidad_dias_reservados,0) AS cantidad_dias_reservados,
       DIRECCION_HOSTAL_HABITACION_HOSTAL, NUMERO_HABITACION_HABITACION_HOSTAL, 
       DIRECCION_HOTEL_HABITACION_HOTEL, NUMERO_HABITACION_HABITACION_HOTEL,
       DIRECCION_VIVIENDA_UNIVERSITARIA, NUMERO_APARTAMENTO_VIVIENDA_UNIVERSITARIA,
       DIRECCION_VIVIENDA_HABITACION, NUMERO_APARTAMENTO_VIVIENDA_HABITACION,
       DIRECCION_APARTAMENTO, NUMERO_APARTAMENTO, DIRECCION_VIVIENDA_EXPRESS
FROM
    (SELECT id,
           NVL(DIRECCION_HOSTAL_HABITACION_HOSTAL,'No Aplica') AS DIRECCION_HOSTAL_HABITACION_HOSTAL, NVL(NUMERO_HABITACION_HABITACION_HOSTAL,'No Aplica') AS NUMERO_HABITACION_HABITACION_HOSTAL, 
           NVL(DIRECCION_HOTEL_HABITACION_HOTEL,'No Aplica') AS DIRECCION_HOTEL_HABITACION_HOTEL, NVL(NUMERO_HABITACION_HABITACION_HOTEL,'No Aplica') AS NUMERO_HABITACION_HABITACION_HOTEL, 
           NVL(DIRECCION_VIVIENDA_UNIVERSITARIA,'No Aplica') AS DIRECCION_VIVIENDA_UNIVERSITARIA, NVL(NUMERO_APARTAMENTO_VIVIENDA_UNIVERSITARIA,'No Aplica') AS NUMERO_APARTAMENTO_VIVIENDA_UNIVERSITARIA, 
           NVL(DIRECCION_VIVIENDA_HABITACION,'No Aplica') AS DIRECCION_VIVIENDA_HABITACION, NVL(NUMERO_APARTAMENTO_VIVIENDA_HABITACION,'No Aplica') AS NUMERO_APARTAMENTO_VIVIENDA_HABITACION, 
           NVL(DIRECCION_APARTAMENTO,'No Aplica') AS DIRECCION_APARTAMENTO, NVL(NUMERO_APARTAMENTO,'No Aplica') AS NUMERO_APARTAMENTO, 
           NVL(DIRECCION_VIVIENDA_EXPRESS,'No Aplica') AS DIRECCION_VIVIENDA_EXPRESS
    FROM oferta) ofertas
    FULL OUTER JOIN
        (SELECT id_oferta, SUM(duracion_dias) AS cantidad_dias_reservados
        FROM reserva
        GROUP BY id_oferta) reservas
        ON ofertas.id = reservas.id_oferta
   WHERE cantidad_dias_reservados <= 30 OR cantidad_dias_reservados IS NULL;

--RFC10 cliente
SELECT *
FROM reserva
WHERE (fecha_realizacion_reserva BETWEEN (to_date('20-07-2018','DD-MM-YYYY')) AND (to_date('30-07-2018','DD-MM-YYYY'))) 
AND id_oferta = 3
AND id_cliente = 100000268
ORDER BY id_cliente;

--RFC10 admin
SELECT *
FROM cliente
WHERE id IN (
    SELECT DISTINCT id_cliente
    FROM reserva
    WHERE (fecha_realizacion_reserva BETWEEN (to_date('20-07-2018','DD-MM-YYYY')) AND (to_date('30-07-2023','DD-MM-YYYY'))) 
    AND id_oferta = 79945)
ORDER BY id;

--RFC11 cliente
SELECT *
FROM reserva
WHERE (fecha_realizacion_reserva NOT BETWEEN (to_date('20-07-2016','DD-MM-YYYY')) AND (to_date('30-07-2017','DD-MM-YYYY'))) 
AND id_oferta = 3
AND id_cliente = 100000268
ORDER BY id_cliente;

--RFC11 admin
SELECT *
FROM cliente
WHERE id NOT IN (
    SELECT DISTINCT id_cliente
    FROM reserva
    WHERE (fecha_realizacion_reserva BETWEEN (to_date('20-07-2018','DD-MM-YYYY')) AND (to_date('30-07-2023','DD-MM-YYYY'))) 
    AND id_oferta = 79945)
ORDER BY id;

--RFC12 mas ocupado
SELECT a.id, NVL(b.veces_reservado,0)
FROM(
    (SELECT id
    FROM oferta) a
    LEFT OUTER JOIN(
        SELECT id_oferta, COUNT(*) AS veces_reservado
        FROM reserva
        WHERE (to_date('01-01-2022','DD-MM-YYYY') BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
        AND (to_date('01-01-2022','DD-MM-YYYY')+1 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
        AND (to_date('01-01-2022','DD-MM-YYYY')+2 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
        AND (to_date('01-01-2022','DD-MM-YYYY')+3 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
        AND (to_date('01-01-2022','DD-MM-YYYY')+4 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
        AND (to_date('01-01-2022','DD-MM-YYYY')+5 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
        AND (to_date('01-01-2022','DD-MM-YYYY')+6 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
        GROUP BY id_oferta) b
        ON a.id = b.id_oferta)
ORDER BY veces_reservado ASC
FETCH FIRST ROW ONLY;

--RFC12 menos ocupado
SELECT a.id, NVL(b.veces_reservado,0)
FROM(
    (SELECT id
    FROM oferta) a
    LEFT OUTER JOIN(
        SELECT id_oferta, COUNT(*) AS veces_reservado
        FROM reserva
        WHERE (to_date('01-01-2022','DD-MM-YYYY') BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
        AND (to_date('01-01-2022','DD-MM-YYYY')+1 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
        AND (to_date('01-01-2022','DD-MM-YYYY')+2 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
        AND (to_date('01-01-2022','DD-MM-YYYY')+3 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
        AND (to_date('01-01-2022','DD-MM-YYYY')+4 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
        AND (to_date('01-01-2022','DD-MM-YYYY')+5 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
        AND (to_date('01-01-2022','DD-MM-YYYY')+6 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
        GROUP BY id_oferta) b
        ON a.id = b.id_oferta)
ORDER BY veces_reservado DESC
FETCH FIRST ROW ONLY;

--RFC12 operador mas ocupado
SELECT a.id, NVL(b.veces_reservado,0) AS veces_ocupado
FROM
    ((SELECT id
    FROM operador) a
    LEFT OUTER JOIN
        (SELECT id_operador, COUNT(*) AS veces_reservado
        FROM oferta
        WHERE id IN(
            SELECT id_oferta
            FROM reserva
            WHERE (to_date('01-01-2022','DD-MM-YYYY') BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
            AND (to_date('01-01-2022','DD-MM-YYYY')+1 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
            AND (to_date('01-01-2022','DD-MM-YYYY')+2 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
            AND (to_date('01-01-2022','DD-MM-YYYY')+3 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
            AND (to_date('01-01-2022','DD-MM-YYYY')+4 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
            AND (to_date('01-01-2022','DD-MM-YYYY')+5 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
            AND (to_date('01-01-2022','DD-MM-YYYY')+6 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias))
        GROUP BY id_operador) b
        ON a.id = b.id_operador)
ORDER BY veces_ocupado DESC
FETCH FIRST ROW ONLY;

--RFC12 operador menos ocupado
SELECT a.id, NVL(b.veces_reservado,0) AS veces_ocupado
FROM
    ((SELECT id
    FROM operador) a
    LEFT OUTER JOIN
        (SELECT id_operador, COUNT(*) AS veces_reservado
        FROM oferta
        WHERE id IN(
            SELECT id_oferta
            FROM reserva
            WHERE (to_date('01-01-2022','DD-MM-YYYY') BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
            AND (to_date('01-01-2022','DD-MM-YYYY')+1 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
            AND (to_date('01-01-2022','DD-MM-YYYY')+2 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
            AND (to_date('01-01-2022','DD-MM-YYYY')+3 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
            AND (to_date('01-01-2022','DD-MM-YYYY')+4 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
            AND (to_date('01-01-2022','DD-MM-YYYY')+5 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias)
            AND (to_date('01-01-2022','DD-MM-YYYY')+6 BETWEEN fecha_inicial AND fecha_inicial+duracion_dias))
        GROUP BY id_operador) b
        ON a.id = b.id_operador)
ORDER BY veces_ocupado ASC
FETCH FIRST ROW ONLY;

--RFC12 todas las semanas
WITH week_numbers AS (
  SELECT LEVEL AS week_number
  FROM DUAL
  CONNECT BY LEVEL <= 52 
),
reservas_por_semana AS (
  SELECT wn.week_number, reserva.id_oferta, COUNT(*) AS veces_reservado,
    ROW_NUMBER() OVER (PARTITION BY wn.week_number ORDER BY COUNT(*) DESC) AS rn
  FROM week_numbers wn
  JOIN reserva ON wn.week_number BETWEEN TO_CHAR(reserva.fecha_inicial, 'IW') AND TO_CHAR(reserva.fecha_inicial + reserva.duracion_dias, 'IW')
  GROUP BY wn.week_number, reserva.id_oferta
)
SELECT week_number, id_oferta, veces_reservado
FROM reservas_por_semana
WHERE rn = 1
ORDER BY week_number;

--RFC13 only suites
WITH suites_hotel AS (
  SELECT direccion_hotel, numero_habitacion
  FROM habitacion_hotel
  WHERE tipo = 'suite'
),
ofertas_suites AS (
  SELECT id
  FROM oferta
  WHERE (direccion_hotel_habitacion_hotel,numero_habitacion_habitacion_hotel) IN (
    SELECT direccion_hotel, numero_habitacion
    FROM suites_hotel)
),
clientes_suites AS (
  SELECT DISTINCT r.id_cliente
  FROM reserva r
  JOIN ofertas_suites os ON r.id_oferta = os.id
)
SELECT c.id, c.nombre, c.tipo
FROM cliente c
WHERE NOT EXISTS (
  SELECT 1
  FROM clientes_suites cs
  WHERE cs.id_cliente = c.id
  AND cs.id_cliente NOT IN (
    SELECT id_cliente
    FROM clientes_suites
  )
);

--RFC13 cliente firme
WITH month_years AS (
  SELECT EXTRACT(YEAR FROM fecha_realizacion_reserva) AS year_number, EXTRACT(MONTH FROM fecha_realizacion_reserva) AS month_number
  FROM reserva
  GROUP BY EXTRACT(YEAR FROM fecha_realizacion_reserva), EXTRACT(MONTH FROM fecha_realizacion_reserva)
),
reservas_por_mes AS (
  SELECT my.year_number, my.month_number, reserva.id_cliente
  FROM month_years my
  JOIN reserva ON EXTRACT(YEAR FROM reserva.fecha_realizacion_reserva) = my.year_number AND EXTRACT(MONTH FROM reserva.fecha_realizacion_reserva) = my.month_number
  GROUP BY my.year_number, my.month_number, reserva.id_cliente
),
total_meses AS (
  SELECT COUNT(DISTINCT year_number || month_number) AS meses_totales
  FROM reservas_por_mes
),
reservas_por_cliente AS (
  SELECT id_cliente, COUNT(DISTINCT year_number || month_number) AS meses_reserva
  FROM reservas_por_mes
  GROUP BY id_cliente
)
SELECT rpc.id_cliente
FROM reservas_por_cliente rpc
CROSS JOIN total_meses tm
WHERE rpc.meses_reserva = tm.meses_totales;

--RFC13 cliente puppy
SELECT DISTINCT id
FROM cliente
WHERE id IN (
    SELECT id_cliente
    FROM reserva
    WHERE id_oferta IN(
        SELECT id
        FROM oferta
        WHERE costo_contrato_dia >= 150));